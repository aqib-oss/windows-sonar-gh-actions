name: main-workflow

on:
  push:
    branches: ["main"]

permissions:
  # Needed for managing releases and pushing code
  contents: write
  # For GitHub Pages
  pages: write
  # For auth to third-party services
  id-token: write

concurrency:
  group: "sonaronwindows-${{ github.head_ref }}"
  cancel-in-progress: false

env:
  PYTHON_VERSION: "3.11"
  CONDA_ENV: "conda_sonaronwindows"
  PYPI_LIBRARY_NAME: "sonaronwindows"
  TEST_IMPORT: "${{ vars.TEST_IMPORT_STATEMENT }}"
  LINK_TO_RELEASES: "https://github.com/${{ github.repository }}/releases"
  SONAR_SCANNER_URL: https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-6.1.0.4477-windows-x64.zip
  SONAR_INSTALL_DIR: C:\SonarScannerCLI\sonar-scanner-6.1.0.4477-windows-x64
  SEMVER_PAT: ${{ secrets.SEMVER_GH_TOKEN }}

jobs:
  pre_check:
    runs-on: windows-latest
    outputs:
      is_semver: ${{ steps.check_message.outputs.is_semver }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Check Commit Message Format
        id: check_message
        shell: powershell
        run: |
          $commit_message = git log --format=%B -n 1 HEAD | Out-String
          Write-Output "commit_message: $commit_message"

          if ($commit_message -match '^[0-9]+\.[0-9]+\.[0-9]+$') {
              echo "Detected standard semantic versioning"
              Add-Content -Path $env:GITHUB_OUTPUT -Value "is_semver=true"
          }
          elseif ($commit_message -match '^[0-9]+\.[0-9]+\.[0-9]+\r\n\r\nAutomatically generated by python-semantic-release') {
              echo "Detected multi-line messages that start with a semantic version"
              Add-Content -Path $env:GITHUB_OUTPUT -Value "is_semver=true"
          }
          else {
              echo "Detected that the latest change was NOT for semantic versioning"
              Add-Content -Path $env:GITHUB_OUTPUT -Value "is_semver=false"
          }

  main-workflow:
    needs: pre_check
    if: needs.pre_check.outputs.is_semver == 'false'
    runs-on: windows-latest

    steps:
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.SEMVER_GH_TOKEN }}

      - name: Install dependencies
        shell: powershell
        run: |
          echo "Adding miniconda directory to the Windows PATH"
          $Env:PATH += ';C:\Miniconda\condabin'
          echo "Creating Conda environment"
          conda env create -f environment.yml
          echo "Initializing and activating Conda"
          conda init powershell
          conda activate conda_sonaronwindows
          echo "Installing poetry"
          (Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | py -
          echo "Adding Poetry Scripts directory to the Windows PATH"
          $Env:PATH += ';C:\Users\runneradmin\AppData\Roaming\Python\Scripts'
          poetry --version

      - name: Install sonaronwindows using poetry
        shell: powershell
        run: |
          conda init powershell
          conda activate conda_sonaronwindows
          poetry install

      - name: Run test suite
        shell: powershell
        run: |
          conda init powershell
          conda activate conda_sonaronwindows
          poetry run pytest

      - name: Check Sonar Scanner CLI in cache
        uses: actions/cache@v4
        with:
          path: C:\SonarScannerCLI
          key: windows-sonar
        id: cache-sonar

      - name: Install SonarScanner CLI
        if: steps.cache-sonar.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          echo "Creating the SonarScannerCLI directory and installing the SonarScanner CLI"
          New-Item -Path "C:\" -Name "SonarScannerCLI" -ItemType "directory"
          Invoke-WebRequest -Uri "${{ env.SONAR_SCANNER_URL }}" -Outfile C:\SonarScannerCLI\sonar-scanner.zip
          Expand-Archive -LiteralPath C:\SonarScannerCLI\sonar-scanner.zip -DestinationPath C:SonarScannerCLI

      - name: Run Sonar Scan
        shell: powershell
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          echo "Running Sonar Scan"
          ${{ env.SONAR_INSTALL_DIR }}\bin\sonar-scanner.bat -D'sonar.token=${{ secrets.SONAR_TOKEN }}'

      - name: Semantic Release
        shell: powershell
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PRE_RELEASE: ${{ env.PRE_RELEASE }}
          SEMVER_PAT: ${{ secrets.SEMVER_GH_TOKEN }}
        run: |
          conda init powershell
          conda activate conda_sonaronwindows
          git config user.name github-actions
          git config user.email github-actions@github.com
          poetry --version
          poetry run semantic-release version
          poetry run semantic-release publish
